{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","monster","id","src","alt","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","state","searchField","fetch","then","response","json","setState","this","filteredMonsters","filter","toLowerCase","includes","e","target","value","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6TAGaA,EAAO,SAAAC,GAAK,OACrB,sBAA4BC,UAAS,8BAAyBD,EAAME,QAAQC,IAA5E,UACI,qBAAKC,IAAG,+BAA0BJ,EAAME,QAAQC,GAAxC,0BAAoEE,IAAI,YAChF,6BAAKL,EAAME,QAAQI,OACnB,4BAAIN,EAAME,QAAQK,UAHZP,EAAME,QAAQC,KCCfK,G,MAAW,SAAAR,GAAK,OACrB,qBAAKC,UAAU,YAAf,SACKD,EAAMS,SAASC,KAAI,SAAAR,GAAO,OACvB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,WCLtBQ,G,YAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,aAAf,OACrB,uBACIZ,UAAU,SACVa,KAAK,SACLF,YAAaA,EACbG,SAAYF,MCgCLG,E,kDAhCb,aAAc,IAAD,8BACX,gBACKC,MAAQ,CACXR,SAAW,GACXS,YAAc,IAJL,E,qDAQb,WAAoB,IAAD,OACjBC,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAEA,EAASC,UACxBF,MAAK,SAAAlB,GAAO,OAAE,EAAKqB,SAAS,CAACd,SAASP,S,oBAGzC,WAAS,IAAD,SAC0BsB,KAAKP,MAA9BR,EADD,EACCA,SAAUS,EADX,EACWA,YACXO,EAAmBhB,EAASiB,QAAO,SAAAxB,GAAO,OAC9CA,EAAQI,KAAKqB,cAAcC,SAASV,EAAYS,kBAElD,OACE,sBAAK1B,UAAU,MAAf,UACE,kDACA,cAAC,EAAD,CACEW,YAAY,gBACZC,aAAc,SAAAgB,GAAC,OAAE,EAAKN,SAAS,CAACL,YAAYW,EAAEC,OAAOC,WAEvD,cAAC,EAAD,CAAUtB,SAAUgB,W,GA5BVO,IAAMC,WCMTC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBhB,MAAK,YAAkD,IAA/CiB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.db5ed7e6.chunk.js","sourcesContent":["import React from 'react';\nimport './card.style.css';\n\nexport const Card = props => (\n    <div key={props.monster.id} className={`card-container card-${props.monster.id}`}>\n        <img src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} alt=\"monster\"/>\n        <h2>{props.monster.name}</h2>\n        <p>{props.monster.email}</p>\n    </div>\n)\n","import React from 'react';\nimport { Card } from '../card/card.component';\nimport './card-list.style.css';\n\n\nexport const CardList = props => (\n        <div className='card-list'>\n            {props.monsters.map(monster=>(\n                <Card key={monster.id} monster={monster}/>        \n            ))}\n        </div>\n       //<div className='card-list'>{props.children}</div>\n)","import React from 'react';\nimport './search-box.style.css'\n\nexport const SearchBox = ({placeholder, handleChange}) => (\n    <input \n        className=\"search\"\n        type=\"search\" \n        placeholder={placeholder}\n        onChange = {handleChange}\n    />\n)","import React from 'react';\nimport { CardList } from './components/card-list/card-list.component';\n//import logo from './logo.svg';\nimport './App.css';\nimport { SearchBox } from './components/search-box/search-box.component';\n\nclass App extends React.Component{\n\n  constructor(){\n    super();\n    this.state = {\n      monsters : [],\n      searchField : \"\"\n    }\n  }\n\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response=>response.json())\n    .then(monster=>this.setState({monsters:monster}))\n  }\n\n  render(){\n    const {monsters, searchField} = this.state;\n    const filteredMonsters = monsters.filter(monster=>\n      monster.name.toLowerCase().includes(searchField.toLowerCase())\n    )\n    return (\n      <div className=\"App\">\n        <h1>Monsters Rolodex</h1>\n        <SearchBox\n          placeholder='Find monsters'\n          handleChange={e=>this.setState({searchField:e.target.value})}\n        />\n        <CardList monsters={filteredMonsters}/>\n      </div>\n    ); \n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}